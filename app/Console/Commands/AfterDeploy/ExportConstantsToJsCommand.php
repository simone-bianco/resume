<?php

namespace App\Console\Commands\AfterDeploy;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Str;

class ExportConstantsToJsCommand extends Command
{
    /**
     * La firma del comando console.
     *
     * @var string
     */
    protected $signature = 'app:export-constants-to-js';

    /**
     * La descrizione del comando console.
     *
     * @var string
     */
    protected $description = "Esporta la configurazione 'constants' in JavaScript (constants.js) senza trasformazioni.";

    /**
     * Esegui il comando console.
     */
    public function handle(): int
    {
        $this->newLine();
        $this->line("🚀 \e[1;34mInizio Esportazione Constants Laravel in JavaScript...\e[0m");
        $this->line("===================================================================");

        $phpConfigKey = 'constants';
        $jsRelativePath = 'config/constants.js';

        try {
            $this->line("⚙️  Processando: \e[0;36mconfig('{$phpConfigKey}')\e[0m");

            if (!config()->has($phpConfigKey)) {
                $this->warn("   ⚠️  Chiave di configurazione '{$phpConfigKey}' non trovata. Uscita...");
                return Command::FAILURE;
            }

            $configValue = config($phpConfigKey);

            // Sanifica eventuali regex nelle stringhe (non dovrebbe servire per constants, ma è sicuro)
            $this->sanitizeRegexInConfig($configValue);

            $jsRelativePath = ltrim($jsRelativePath, '/\\');
            if (!str_ends_with(strtolower($jsRelativePath), '.js')) {
                $jsRelativePath .= '.js';
            }
            $fullJsPath = resource_path('js/' . $jsRelativePath);

            $jsRepresentation = json_encode(
                $configValue,
                JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE | JSON_INVALID_UTF8_IGNORE
            );

            if ($jsRepresentation === false) {
                $this->error("   ❌ Errore nella codifica JSON per '{$phpConfigKey}'. Dettagli: " . json_last_error_msg());
                return Command::FAILURE;
            }

            $jsVariableName = Str::camel(str_replace('.', '_', $phpConfigKey));
            if (!preg_match('/^[a-zA-Z_$][a-zA-Z0-9_$]*$/', $jsVariableName)) {
                $jsVariableName = Str::camel(pathinfo($jsRelativePath, PATHINFO_FILENAME));
                if (!preg_match('/^[a-zA-Z_$][a-zA-Z0-9_$]*$/', $jsVariableName)) {
                    $jsVariableName = 'configValue';
                }
            }

            $jsContent = $this->createJsFileContent($phpConfigKey, $jsVariableName, $jsRepresentation);

            File::ensureDirectoryExists(dirname($fullJsPath));
            File::put($fullJsPath, $jsContent);

            $this->line("   ✅ \e[0;32mEsportato con successo in:\e[0m \e[0;33mresources/js/{$jsRelativePath}\e[0m");
            $this->line("===================================================================");
            $this->info("🎉 \e[1;32mEsportazione completata con successo!\e[0m");
            $this->newLine();
            return Command::SUCCESS;
        } catch (Throwable $e) {
            $this->error("   ❌ Errore durante l'esportazione di '{$phpConfigKey}': " . $e->getMessage());
            $this->line("      File: " . $e->getFile() . " Linea: " . $e->getLine());
            $this->newLine();
            return Command::FAILURE;
        }
    }

    protected function sanitizeRegexInConfig(mixed &$value): void
    {
        if (is_array($value)) {
            foreach ($value as &$item) {
                $this->sanitizeRegexInConfig($item);
            }
        } elseif (is_string($value)) {
            if (preg_match('/^\/.*\/[a-zA-Z]*u[a-zA-Z]*$/', $value)) {
                $lastSlashPos = strrpos($value, '/');
                if ($lastSlashPos !== false && $lastSlashPos < strlen($value) - 1) {
                    $modifiers = substr($value, $lastSlashPos + 1);
                    $newModifiers = str_replace('u', '', $modifiers);
                    if ($modifiers !== $newModifiers) {
                        $value = substr($value, 0, $lastSlashPos + 1) . $newModifiers;
                    }
                }
            }
        }
    }

    protected function createJsFileContent(string $phpConfigKey, string $jsVariableName, string $jsRepresentation): string
    {
        return <<<JS
/**
 * ==============================================================
 * ⚙️ GENERATED CONFIGURATION FILE ⚙️
 * ==============================================================
 *
 * Source: config('{$phpConfigKey}')
 * Generated by: ExportConstantsToJsCommand
 *
 * ⚠️ ATTENZIONE: NON MODIFICARE MANUALMENTE QUESTO FILE!
 * Le modifiche verranno sovrascritte alla prossima esecuzione
 * del comando 'php artisan app:export-constants-to-js'.
 * Modifica la configurazione originale in Laravel e riesegui il comando.
 *
 * ==============================================================
 */
export const {$jsVariableName} = {$jsRepresentation};

export default {$jsVariableName}; // Esporta anche come default per comodità
JS;
    }
}
